/**
 * Milo≈° ≈Ωeleznikov - Mestre Ferreiro Eslavo
 * Cultura: Eslava | Classe: Art√≠fice | Elemento: Ferro e Fogo Ancestral
 */

class MilosZeleznikovSkills {
    constructor() {
        this.characterName = "Milo≈° ≈Ωeleznikov";
        this.characterId = "045CCF3515";
        this.culture = "Eslava";
        this.classe = "Art√≠fice";
        this.element = "Ferro e Fogo Ancestral";
    }

    /**
     * üî® Forja do Drag√£o Eslavo
     * Invoca t√©cnicas ancestrais para forjar arma de escamas de drag√£o durante o combate
     */
    forjaDoDragaoEslavo(battle, caster, target) {
        const skillData = {
            name: "üî® Forja do Drag√£o Eslavo",
            description: "Invoca t√©cnicas ancestrais para forjar arma de escamas de drag√£o",
            animaCost: 0,
            baseDamage: 95,
            type: "weapon_craft",
            element: "fire_metal",
            culturalAuthenticity: "Baseada em tradi√ß√µes metal√∫rgicas eslavas dos C√°rpatos"
        };

        // Anima√ß√£o de forja m√≠stica
        const forgeAnimation = this.createForgeAnimation();

        // Calcular dano com b√¥nus cultural
        let damage = skillData.baseDamage;
        
        // B√¥nus de art√≠fice: +20% damage se atacar ap√≥s defender
        if (caster.previousAction === 'defend') {
            damage = Math.floor(damage * 1.2);
            battle.addToLog('cultural', `${caster.name} forja com precis√£o aperfei√ßoada pela paci√™ncia eslava!`);
        }

        // B√¥nus de temperatura: aumenta com cada uso consecutivo (forja aquecendo)
        if (!caster.forgeHeat) caster.forgeHeat = 0;
        caster.forgeHeat = Math.min(caster.forgeHeat + 1, 5);
        const heatBonus = caster.forgeHeat * 0.1; // +10% por n√≠vel de aquecimento
        damage = Math.floor(damage * (1 + heatBonus));

        // Chance especial de criar "Arma Draconiana" tempor√°ria
        const dragonWeaponChance = 0.25 + (caster.forgeHeat * 0.05); // 25% + 5% por n√≠vel
        const createsDragonWeapon = Math.random() < dragonWeaponChance;

        if (createsDragonWeapon) {
            // Aplicar buff "Arma Draconiana" 
            caster.statusEffects = caster.statusEffects || [];
            caster.statusEffects.push({
                type: 'dragon_weapon',
                name: 'Arma Draconiana',
                duration: 3,
                attackBonus: 25,
                description: 'Arma forjada com escamas de drag√£o - +25 ataque'
            });
            
            damage = Math.floor(damage * 1.3); // +30% damage na cria√ß√£o
            battle.addToLog('legendary', `üêâ Milo≈° forja uma Arma Draconiana! As escamas de drag√£o brilham com poder ancestral!`);
        }

        // Aplicar dano e efeitos visuais
        return {
            damage: damage,
            effects: {
                animation: forgeAnimation,
                screenShake: createsDragonWeapon,
                soundEffect: 'forge_hammer',
                particles: 'fire_sparks'
            },
            statusApplied: createsDragonWeapon ? ['dragon_weapon'] : [],
            culturalNarrative: this.getForgeNarrative(caster.forgeHeat, createsDragonWeapon)
        };
    }

    /**
     * ‚öíÔ∏è Martelo dos Ancestrais
     * Invoca esp√≠ritos de ferreiros eslavos para guiar o ataque
     */
    marteloDoAncesrais(battle, caster, target) {
        const skillData = {
            name: "‚öíÔ∏è Martelo dos Ancestrais",
            description: "Invoca esp√≠ritos de ferreiros eslavos para guiar o ataque",
            animaCost: 30,
            baseDamage: 70,
            type: "ancestral_summon",
            element: "spirit_metal"
        };

        // Verificar se tem mana suficiente
        if (caster.currentAnima < skillData.animaCost) {
            throw new Error('√Çnima insuficiente para invocar os ancestrais');
        }

        // Consumir mana
        caster.currentAnima -= skillData.animaCost;

        let damage = skillData.baseDamage;

        // Cada personagem derrotado aumenta o poder (ancestrais se unem)
        const defeatedEnemies = battle.defeatedEnemies || 0;
        const ancestralPower = defeatedEnemies * 0.15; // +15% por inimigo derrotado
        damage = Math.floor(damage * (1 + ancestralPower));

        // Chance de cr√≠tico aumentada baseada na experi√™ncia de combate
        const criticalChance = 0.2 + (defeatedEnemies * 0.05);
        const isCritical = Math.random() < criticalChance;

        if (isCritical) {
            damage = Math.floor(damage * (caster.critico || 2.0));
            battle.addToLog('critical', `üëª Os ancestrais eslavos guiam o martelo com precis√£o mortal!`);
        }

        // Efeito: reduz defesa do inimigo por 2 turnos (metal amassado)
        target.statusEffects = target.statusEffects || [];
        target.statusEffects.push({
            type: 'armor_dent',
            name: 'Armadura Amassada',
            duration: 2,
            defenseReduction: 15,
            description: 'Defesa reduzida pelo martelo ancestral'
        });

        return {
            damage: damage,
            isCritical: isCritical,
            animaCost: skillData.animaCost,
            effects: {
                animation: 'ancestral_hammer',
                ghostSpirits: true,
                soundEffect: 'hammer_echo'
            },
            statusApplied: ['armor_dent'],
            culturalNarrative: `Os esp√≠ritos de mil ferreiros eslavos convergem no martelo de Milo≈°, cada batida ecoando com a sabedoria ancestral!`
        };
    }

    /**
     * üõ°Ô∏è Koljƒçuga Drakonova
     * Forja armadura tempor√°ria de escamas de drag√£o
     */
    koljcugaDrakonova(battle, caster, target) {
        const skillData = {
            name: "üõ°Ô∏è Koljƒçuga Drakonova", 
            description: "Forja armadura tempor√°ria de escamas de drag√£o",
            animaCost: 45,
            type: "defensive_craft",
            element: "dragon_metal"
        };

        if (caster.currentAnima < skillData.animaCost) {
            throw new Error('√Çnima insuficiente para forjar Koljƒçuga');
        }

        caster.currentAnima -= skillData.animaCost;

        // Aplicar buff de armadura draconiana
        caster.statusEffects = caster.statusEffects || [];
        caster.statusEffects.push({
            type: 'dragon_armor',
            name: 'Koljƒçuga Drakonova',
            duration: 4,
            defenseBonus: 30,
            magicResistance: 40,
            description: 'Armadura de escamas de drag√£o - +30 defesa, +40% resist√™ncia m√°gica'
        });

        // Cura pequena (representando prote√ß√£o)
        const healAmount = Math.floor(caster.maxHP * 0.15);
        caster.currentHP = Math.min(caster.maxHP, caster.currentHP + healAmount);

        return {
            damage: 0,
            healing: healAmount,
            animaCost: skillData.animaCost,
            effects: {
                animation: 'armor_forge',
                dragonGlow: true,
                soundEffect: 'dragon_scales'
            },
            statusApplied: ['dragon_armor'],
            culturalNarrative: `Milo≈° invoca as t√©cnicas secretas dos C√°rpatos, forjando uma armadura que brilha com o poder dos drag√µes eslavos!`
        };
    }

    // Utilit√°rios e anima√ß√µes

    createForgeAnimation() {
        return {
            type: 'forge_sequence',
            duration: 2000,
            stages: [
                { time: 0, effect: 'hammer_raise' },
                { time: 500, effect: 'forge_strike', sound: 'metal_clang' },
                { time: 1000, effect: 'fire_burst', particles: 'sparks' },
                { time: 1500, effect: 'weapon_glow', light: 'dragon_fire' }
            ]
        };
    }

    getForgeNarrative(forgeHeat, isDragonWeapon) {
        const heatNarratives = [
            "A forja de Milo≈° est√° fria, mas suas m√£os experientes come√ßam o trabalho...",
            "O metal aquece sob as batidas ritmadas, ecoando tradi√ß√µes ancestrais...",
            "A forja brilha intensamente, cada movimento guiado pelos esp√≠ritos dos C√°rpatos...",
            "O fogo atinge temperaturas lend√°rias, dignos dos drag√µes eslavos...",
            "A forja pulsa com poder sobrenatural, as chamas dan√ßam em cores imposs√≠veis...",
            "üî• A FORJA ANCESTRAL ATINGE SEU PICO! Os esp√≠ritos de mil mestres ferreiros convergem!"
        ];

        let narrative = heatNarratives[forgeHeat] || heatNarratives[0];
        
        if (isDragonWeapon) {
            narrative += " ‚ú® Uma energia draconiana permeia o metal, criando algo verdadeiramente lend√°rio!";
        }

        return narrative;
    }

    // Status effects espec√≠ficos do personagem

    processDragonWeaponEffect(character, battle) {
        const effect = character.statusEffects.find(e => e.type === 'dragon_weapon');
        if (effect) {
            // Adicionar b√¥nus de ataque
            character.attack = (character.baseAttack || character.attack) + effect.attackBonus;
            
            // Efeito visual cont√≠nuo
            battle.addVisualEffect('dragon_weapon_glow', character);
            
            effect.duration--;
            if (effect.duration <= 0) {
                character.attack = character.baseAttack || character.attack;
                battle.addToLog('system', `A Arma Draconiana de ${character.name} perde seu brilho...`);
            }
        }
    }

    processDragonArmorEffect(character, battle) {
        const effect = character.statusEffects.find(e => e.type === 'dragon_armor');
        if (effect) {
            // Aplicar resist√™ncias
            if (battle.lastDamageType === 'magic') {
                const reduction = Math.floor(battle.lastDamage * (effect.magicResistance / 100));
                battle.lastDamage -= reduction;
                battle.addToLog('resist', `Koljƒçuga Drakonova absorve ${reduction} de dano m√°gico!`);
            }
            
            effect.duration--;
            if (effect.duration <= 0) {
                battle.addToLog('system', `A Koljƒçuga Drakonova de ${character.name} se desfaz em cinzas douradas...`);
            }
        }
    }

    // Metadata para o sistema de skills

    getSkillsMetadata() {
        return {
            characterId: this.characterId,
            characterName: this.characterName,
            culture: this.culture,
            skills: [
                {
                    id: 'forja_do_dragao_eslavo',
                    name: 'üî® Forja do Drag√£o Eslavo',
                    animaCost: 0,
                    damage: 95,
                    type: 'weapon_craft',
                    cooldown: 0,
                    description: 'Invoca t√©cnicas ancestrais para forjar arma de escamas de drag√£o'
                },
                {
                    id: 'martelo_dos_ancestrais',
                    name: '‚öíÔ∏è Martelo dos Ancestrais',
                    animaCost: 30,
                    damage: 70,
                    type: 'ancestral_summon',
                    cooldown: 1,
                    description: 'Invoca esp√≠ritos de ferreiros eslavos para guiar o ataque'
                },
                {
                    id: 'koljcuga_drakonova',
                    name: 'üõ°Ô∏è Koljƒçuga Drakonova',
                    animaCost: 45,
                    damage: 0,
                    type: 'defensive_craft',
                    cooldown: 2,
                    description: 'Forja armadura tempor√°ria de escamas de drag√£o'
                }
            ],
            culturalElements: [
                'Tradi√ß√µes metal√∫rgicas dos C√°rpatos',
                'Esp√≠ritos ancestrais de ferreiros',
                'Mitologia de drag√µes eslavos',
                'Resist√™ncia cultural atrav√©s da arte'
            ]
        };
    }
}

// Export para compatibilidade Node.js e Browser
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MilosZeleznikovSkills;
} else {
    window.MilosZeleznikovSkills = MilosZeleznikovSkills;
}