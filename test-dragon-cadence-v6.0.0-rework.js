/**
 * Teste da Cad√™ncia do Drag√£o v6.0.0 - REWORK BASEADO NO ATTACK
 * 
 * Novo algoritmo: +10% do attack base por ataque b√°sico consecutivo
 * Exemplo: Loki (Attack 50) ‚Üí +5, +10, +15, +20 pontos de attack
 */

import { BattleMechanics } from './src/domain/services/BattleMechanics.js';

console.log('üêâ TESTE CAD√äNCIA DO DRAG√ÉO v6.0.0 - REWORK BASEADO NO ATTACK');
console.log('=' .repeat(80));

const battleMechanics = new BattleMechanics();
const lokiId = 'EA32D10F2D';

// Personagem Loki com dados reais do database
const loki = {
  id: lokiId,
  name: 'Loki',
  classe: 'Lutador',
  attack: 50, // Valor real do database
  currentAnima: 100
};

console.log(`\nüìä TESTE: ${loki.name} (${loki.classe})`);
console.log(`Attack base: ${loki.attack}`);
console.log('√Çnima: 100');

console.log('\nüéØ FASE 1: TENTATIVA DE ATAQUE SEM ATIVAR SKILL');
const resultInactive = battleMechanics.processDragonCadence(lokiId, loki.attack);
console.log(`Resultado: ${resultInactive.message}`);
console.log(`Attack bonus atual: +${resultInactive.attackBonus} pontos`);

console.log('\nüéØ FASE 2: ATIVANDO A SKILL CAD√äNCIA DO DRAG√ÉO');
const activationResult = battleMechanics.activateDragonCadence(lokiId);
console.log(`Resultado: ${activationResult.message}`);

console.log('\nüéØ FASE 3: TESTANDO ATAQUES B√ÅSICOS PROGRESSIVOS');
console.log('Algoritmo: attackBonus = baseAttack * 0.10 * consecutiveAttacks');

// Simular 10 ataques b√°sicos consecutivos
for (let i = 1; i <= 10; i++) {
  const cadenceResult = battleMechanics.processDragonCadence(lokiId, loki.attack);
  
  const expectedBonus = Math.round(loki.attack * 0.10 * i);
  const bonusCorrect = cadenceResult.attackBonus === expectedBonus ? '‚úÖ' : '‚ùå';
  
  console.log(`Ataque ${i}: Attack ${loki.attack} ‚Üí ${cadenceResult.totalAttack} (+${cadenceResult.attackBonus}) ${bonusCorrect}`);
  console.log(`  Esperado: +${expectedBonus} | Atual: +${cadenceResult.attackBonus}`);
}

console.log('\nüéØ FASE 4: TESTANDO RESET DE SEQU√äNCIA (usar skill/defender)');
const breakResult = battleMechanics.breakDragonCadence(lokiId);
console.log(`Resultado: ${breakResult.message || 'Reset executado'}`);

console.log('\nüéØ FASE 5: ATAQUES AP√ìS RESET (deve come√ßar do +5 novamente)');
for (let i = 1; i <= 3; i++) {
  const cadenceResult = battleMechanics.processDragonCadence(lokiId, loki.attack);
  const expectedBonus = Math.round(loki.attack * 0.10 * i);
  
  console.log(`Ataque ap√≥s reset ${i}: Attack ${loki.attack} ‚Üí ${cadenceResult.totalAttack} (+${cadenceResult.attackBonus})`);
  console.log(`  Esperado: +${expectedBonus} | Atual: +${cadenceResult.attackBonus}`);
}

console.log('\nüìä EXEMPLOS DE SCALING PARA DIFERENTES PERSONAGENS:');

// Teste com diferentes valores de attack
const testCases = [
  { name: 'Personagem Fraco', attack: 20 },
  { name: 'Loki (Real)', attack: 50 },
  { name: 'Personagem Forte', attack: 100 },
  { name: 'Personagem √âpico', attack: 200 }
];

testCases.forEach(testCase => {
  console.log(`\n${testCase.name} (Attack ${testCase.attack}):`);
  for (let attacks = 1; attacks <= 5; attacks++) {
    const bonus = Math.round(testCase.attack * 0.10 * attacks);
    const totalAttack = testCase.attack + bonus;
    console.log(`  ${attacks} ataques: ${testCase.attack} ‚Üí ${totalAttack} (+${bonus})`);
  }
});

console.log('\nüìà RESUMO DO REWORK v6.0.0:');
console.log('‚úÖ Skill deve ser ATIVADA primeiro (custa 50 √¢nima)');
console.log('‚úÖ Cada ataque b√°sico aumenta Attack em +10% do valor base');
console.log('‚úÖ Skills/defesa/medita√ß√£o resetam contador mas mant√™m estado');
console.log('‚úÖ Algoritmo baseado no Attack: attackBonus = baseAttack * 0.10 * consecutiveAttacks');
console.log('‚úÖ Escalamento linear e previs√≠vel, adaptado ao poder do personagem');

console.log('\n‚úÖ TESTE COMPLETO - CAD√äNCIA DO DRAG√ÉO v6.0.0 REWORK FUNCIONANDO!');